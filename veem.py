# -*- coding: utf-8 -*-
"""VEEM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19mu_tZ2ByCd3lrGb4hqYbBH5cMKxejax
"""

# Read in the data
import pandas as pd
import numpy as np
# Scale the data
from sklearn.preprocessing import StandardScaler

# Pipeline, Gridsearch, train_test_split
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split, GridSearchCV

# Plot the confusion matrix
from sklearn.metrics import confusion_matrix

# Classification Models
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from xgboost import XGBClassifier
from sklearn import svm

data=pd.read_csv('/content/VEEM_Data.csv', index_col=0)

data=data[['Group',
           'Movement speed in all steps in all steps (m/s)',    # VR feature
           'ctx_rh_postcentral'                                 # MRI feature
           ]]

X=data.drop(labels=['Group'], axis=1)
y=data.iloc[:,0]

random_state=0

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = random_state)

data.info()

pipe_lr = Pipeline([('scl', StandardScaler()),
                    ('LR', LogisticRegression(random_state=random_state))])

pipe_dt = Pipeline([('scl', StandardScaler()),
                    ('DT',DecisionTreeClassifier(random_state=random_state))])

pipe_rf = Pipeline([('scl', StandardScaler()),
                    ('RF',RandomForestClassifier(random_state=random_state))])

pipe_knn = Pipeline([('scl', StandardScaler()),
                    ('KNN', KNeighborsClassifier())])

pipe_svm = Pipeline([('scl', StandardScaler()),
                     ('SVM', svm.SVC(random_state=random_state))])

pipe_xgb = Pipeline([('scl', StandardScaler()),
                     ('XGB', XGBClassifier(random_state=random_state))])

param_range = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
param_range_fl = [1.0, 0.75, 0.50, 0.25, 0.10]
n_estimators = [50,100,150,200,250]
learning_rates = [0.1, 0.2, 0.3, 0.4, 0.5]

lr_param_grid = [{'LR__penalty': ['l1', 'l2'],
                   'LR__C': param_range_fl,
                   'LR__solver': ['liblinear']}]

dt_param_grid = [{'DT__criterion': ['gini', 'entropy'],
                   'DT__min_samples_leaf': param_range,
                   'DT__max_depth': param_range,
                   'DT__min_samples_split': param_range[1:]}]

rf_param_grid = [{'RF__min_samples_leaf': param_range,
                   'RF__max_depth': param_range,
                   'RF__min_samples_split': param_range[1:]}]

knn_param_grid = [{'KNN__n_neighbors': param_range,
                   'KNN__weights': ['uniform', 'distance'],
                   'KNN__metric': ['euclidean', 'manhattan']}]

svm_param_grid = [{'SVM__kernel': ['linear', 'rbf', 'poly'], 
                    'SVM__C': param_range}]
                    
xgb_param_grid = [{'XGB__learning_rate': learning_rates,
                    'XGB__max_depth': param_range,
                    'XGB__min_child_weight': param_range[:2],
                    'XGB__subsample': param_range_fl,
                    'XGB__n_estimators': n_estimators}]

from sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold, KFold, GridSearchCV
n_splits=5

lr_grid_search = GridSearchCV(estimator=pipe_lr,
        param_grid=lr_param_grid,
        scoring='accuracy',
        cv = StratifiedKFold(n_splits = n_splits))

dt_grid_search = GridSearchCV(estimator=pipe_dt,
        param_grid=dt_param_grid,
        scoring='accuracy',
        cv = StratifiedKFold(n_splits = n_splits))

rf_grid_search = GridSearchCV(estimator=pipe_rf,
        param_grid=rf_param_grid,
        scoring='accuracy',
        cv = StratifiedKFold(n_splits = n_splits))

knn_grid_search = GridSearchCV(estimator=pipe_knn,
        param_grid=knn_param_grid,
        scoring='accuracy',
        cv = StratifiedKFold(n_splits = n_splits))

svm_grid_search = GridSearchCV(estimator=pipe_svm,
        param_grid=svm_param_grid,
        scoring='accuracy',
        cv = StratifiedKFold(n_splits = n_splits))

xgb_grid_search = GridSearchCV(estimator=pipe_xgb,
        param_grid=xgb_param_grid,
        scoring='accuracy',
        cv = StratifiedKFold(n_splits = n_splits))

grids = [lr_grid_search, dt_grid_search, rf_grid_search, knn_grid_search, svm_grid_search, xgb_grid_search]

for pipe in grids:
    pipe.fit(X_train,y_train)

import pickle
pickle.dump(grids, open("sklearn_reg_models.sav", 'wb'))

results = []

for model in grids:
    results.append(np.abs(model.best_score_))

accuracy = pd.DataFrame(
    results, 
    columns = ["accuracy"],
    index = ["Logistic Regression", "Decision Tree", "Random Forest", "K-Nearest Neighbors", "Support Vector Machines", "XGBoost"]
).sort_values("accuracy")

accuracy